// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright (c) Roman Atachiants and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

package component

import (
	"testing"

	"github.com/kelindar/ecs"
	"github.com/stretchr/testify/assert"
)

func Test_Float32(t *testing.T) {
	arr := ForFloat32()
	assert.NotNil(t, arr)

	entity1 := ecs.NewEntity()
	entity2 := ecs.NewEntity()

	arr.Add(entity1, 0)
	arr.Add(entity2, 0)

	{
		count := 0
		arr.View(func(_ *float32) {
			count++
		})
		assert.Equal(t, 2, count)
	}

	entity1.Delete()
	entity2.Delete()

	{
		count := 0
		arr.Update(func(_ *float32) {
			count++
		})
		assert.Equal(t, 0, count)
	}
}

// Copyright (c) Roman Atachiants and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

func Test_Float64(t *testing.T) {
	arr := ForFloat64()
	assert.NotNil(t, arr)

	entity1 := ecs.NewEntity()
	entity2 := ecs.NewEntity()

	arr.Add(entity1, 0)
	arr.Add(entity2, 0)

	{
		count := 0
		arr.View(func(_ *float64) {
			count++
		})
		assert.Equal(t, 2, count)
	}

	entity1.Delete()
	entity2.Delete()

	{
		count := 0
		arr.Update(func(_ *float64) {
			count++
		})
		assert.Equal(t, 0, count)
	}
}

// Copyright (c) Roman Atachiants and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

func Test_Int16(t *testing.T) {
	arr := ForInt16()
	assert.NotNil(t, arr)

	entity1 := ecs.NewEntity()
	entity2 := ecs.NewEntity()

	arr.Add(entity1, 0)
	arr.Add(entity2, 0)

	{
		count := 0
		arr.View(func(_ *int16) {
			count++
		})
		assert.Equal(t, 2, count)
	}

	entity1.Delete()
	entity2.Delete()

	{
		count := 0
		arr.Update(func(_ *int16) {
			count++
		})
		assert.Equal(t, 0, count)
	}
}

// Copyright (c) Roman Atachiants and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

func Test_Int32(t *testing.T) {
	arr := ForInt32()
	assert.NotNil(t, arr)

	entity1 := ecs.NewEntity()
	entity2 := ecs.NewEntity()

	arr.Add(entity1, 0)
	arr.Add(entity2, 0)

	{
		count := 0
		arr.View(func(_ *int32) {
			count++
		})
		assert.Equal(t, 2, count)
	}

	entity1.Delete()
	entity2.Delete()

	{
		count := 0
		arr.Update(func(_ *int32) {
			count++
		})
		assert.Equal(t, 0, count)
	}
}

// Copyright (c) Roman Atachiants and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

func Test_Int64(t *testing.T) {
	arr := ForInt64()
	assert.NotNil(t, arr)

	entity1 := ecs.NewEntity()
	entity2 := ecs.NewEntity()

	arr.Add(entity1, 0)
	arr.Add(entity2, 0)

	{
		count := 0
		arr.View(func(_ *int64) {
			count++
		})
		assert.Equal(t, 2, count)
	}

	entity1.Delete()
	entity2.Delete()

	{
		count := 0
		arr.Update(func(_ *int64) {
			count++
		})
		assert.Equal(t, 0, count)
	}
}

// Copyright (c) Roman Atachiants and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

func Test_Uint16(t *testing.T) {
	arr := ForUint16()
	assert.NotNil(t, arr)

	entity1 := ecs.NewEntity()
	entity2 := ecs.NewEntity()

	arr.Add(entity1, 0)
	arr.Add(entity2, 0)

	{
		count := 0
		arr.View(func(_ *uint16) {
			count++
		})
		assert.Equal(t, 2, count)
	}

	entity1.Delete()
	entity2.Delete()

	{
		count := 0
		arr.Update(func(_ *uint16) {
			count++
		})
		assert.Equal(t, 0, count)
	}
}

// Copyright (c) Roman Atachiants and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

func Test_Uint32(t *testing.T) {
	arr := ForUint32()
	assert.NotNil(t, arr)

	entity1 := ecs.NewEntity()
	entity2 := ecs.NewEntity()

	arr.Add(entity1, 0)
	arr.Add(entity2, 0)

	{
		count := 0
		arr.View(func(_ *uint32) {
			count++
		})
		assert.Equal(t, 2, count)
	}

	entity1.Delete()
	entity2.Delete()

	{
		count := 0
		arr.Update(func(_ *uint32) {
			count++
		})
		assert.Equal(t, 0, count)
	}
}

// Copyright (c) Roman Atachiants and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.

func Test_Uint64(t *testing.T) {
	arr := ForUint64()
	assert.NotNil(t, arr)

	entity1 := ecs.NewEntity()
	entity2 := ecs.NewEntity()

	arr.Add(entity1, 0)
	arr.Add(entity2, 0)

	{
		count := 0
		arr.View(func(_ *uint64) {
			count++
		})
		assert.Equal(t, 2, count)
	}

	entity1.Delete()
	entity2.Delete()

	{
		count := 0
		arr.Update(func(_ *uint64) {
			count++
		})
		assert.Equal(t, 0, count)
	}
}
