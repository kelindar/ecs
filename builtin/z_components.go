// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package builtin

import (
	"math"
	"reflect"
	"sync"

	"github.com/vmihailenco/msgpack"
)

// --------------------------- Component of float32 ----------------------------

// TypeOfFloat32 returns the type of the component
var TypeOfFloat32 = reflect.TypeOf(new(float32)).Elem()

// ProviderOfFloat32 represents an array of components.
type ProviderOfFloat32 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfFloat32
}

// NewProviderOfFloat32 creates an array of components for the specific type.
func NewProviderOfFloat32() *ProviderOfFloat32 {
	const cap = 128
	c := &ProviderOfFloat32{
		free: make([]int, 0, cap),
		page: make([]pageOfFloat32, 0, cap),
	}
	c.typ = reflect.TypeOf(pageOfFloat32{}.data).Elem()
	return c
}

// Type returns the type of the component.
func (c *ProviderOfFloat32) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *ProviderOfFloat32) Add(component interface{}) int {
	v := component.(float32) // Must be of correct type
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfFloat32{})
		c.free = append(c.free, pageAt)
		offset := c.page[pageAt].Add(v)
		return (64 * pageAt) + offset
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	return (64 * pageAt) + offset
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *ProviderOfFloat32) View(f func(*float32)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *ProviderOfFloat32) Update(f func(*float32)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// ViewAt returns a specific component located at the given index. Read lock
// is acquired in this operation, use it sparingly.
func (c *ProviderOfFloat32) ViewAt(index int) float32 {
	pageAt, offset := index/64, index%64
	c.RLock()
	defer c.RUnlock()
	return *(c.page[pageAt].At(offset))
}

// UpdateAt updates a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfFloat32) UpdateAt(index int, f func(*float32)) {
	pageAt, offset := index/64, index%64
	c.Lock()
	f(c.page[pageAt].At(offset))
	c.Unlock()
}

// RemoveAt removes a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfFloat32) RemoveAt(index int) {
	pageAt, offset := index/64, index%64
	c.Lock()
	defer c.Unlock()
	if c.page[pageAt].IsFull() {
		c.free = append(c.free, pageAt)
	}
	c.page[pageAt].Del(offset)
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *ProviderOfFloat32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *ProviderOfFloat32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of float32 -----------------------------

// Page represents a page for a particular type.
type pageOfFloat32 struct {
	full uint64
	data [64]float32
}

// Add adds an element to the page and returns the offset.
func (p *pageOfFloat32) Add(v float32) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfFloat32) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfFloat32) IsFull() bool {
	return p.full == math.MaxUint64
}

// At returns a specific component located at the given index.
func (p *pageOfFloat32) At(index int) *float32 {
	if (p.full & (1 << index)) > 0 {
		return &p.data[index]
	}
	return nil
}

// Range iterates over the page.
func (p *pageOfFloat32) Range(f func(*float32)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfFloat32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfFloat32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of float64 ----------------------------

// TypeOfFloat64 returns the type of the component
var TypeOfFloat64 = reflect.TypeOf(new(float64)).Elem()

// ProviderOfFloat64 represents an array of components.
type ProviderOfFloat64 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfFloat64
}

// NewProviderOfFloat64 creates an array of components for the specific type.
func NewProviderOfFloat64() *ProviderOfFloat64 {
	const cap = 128
	c := &ProviderOfFloat64{
		free: make([]int, 0, cap),
		page: make([]pageOfFloat64, 0, cap),
	}
	c.typ = reflect.TypeOf(pageOfFloat64{}.data).Elem()
	return c
}

// Type returns the type of the component.
func (c *ProviderOfFloat64) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *ProviderOfFloat64) Add(component interface{}) int {
	v := component.(float64) // Must be of correct type
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfFloat64{})
		c.free = append(c.free, pageAt)
		offset := c.page[pageAt].Add(v)
		return (64 * pageAt) + offset
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	return (64 * pageAt) + offset
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *ProviderOfFloat64) View(f func(*float64)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *ProviderOfFloat64) Update(f func(*float64)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// ViewAt returns a specific component located at the given index. Read lock
// is acquired in this operation, use it sparingly.
func (c *ProviderOfFloat64) ViewAt(index int) float64 {
	pageAt, offset := index/64, index%64
	c.RLock()
	defer c.RUnlock()
	return *(c.page[pageAt].At(offset))
}

// UpdateAt updates a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfFloat64) UpdateAt(index int, f func(*float64)) {
	pageAt, offset := index/64, index%64
	c.Lock()
	f(c.page[pageAt].At(offset))
	c.Unlock()
}

// RemoveAt removes a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfFloat64) RemoveAt(index int) {
	pageAt, offset := index/64, index%64
	c.Lock()
	defer c.Unlock()
	if c.page[pageAt].IsFull() {
		c.free = append(c.free, pageAt)
	}
	c.page[pageAt].Del(offset)
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *ProviderOfFloat64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *ProviderOfFloat64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of float64 -----------------------------

// Page represents a page for a particular type.
type pageOfFloat64 struct {
	full uint64
	data [64]float64
}

// Add adds an element to the page and returns the offset.
func (p *pageOfFloat64) Add(v float64) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfFloat64) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfFloat64) IsFull() bool {
	return p.full == math.MaxUint64
}

// At returns a specific component located at the given index.
func (p *pageOfFloat64) At(index int) *float64 {
	if (p.full & (1 << index)) > 0 {
		return &p.data[index]
	}
	return nil
}

// Range iterates over the page.
func (p *pageOfFloat64) Range(f func(*float64)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfFloat64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfFloat64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of int16 ----------------------------

// TypeOfInt16 returns the type of the component
var TypeOfInt16 = reflect.TypeOf(new(int16)).Elem()

// ProviderOfInt16 represents an array of components.
type ProviderOfInt16 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfInt16
}

// NewProviderOfInt16 creates an array of components for the specific type.
func NewProviderOfInt16() *ProviderOfInt16 {
	const cap = 128
	c := &ProviderOfInt16{
		free: make([]int, 0, cap),
		page: make([]pageOfInt16, 0, cap),
	}
	c.typ = reflect.TypeOf(pageOfInt16{}.data).Elem()
	return c
}

// Type returns the type of the component.
func (c *ProviderOfInt16) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *ProviderOfInt16) Add(component interface{}) int {
	v := component.(int16) // Must be of correct type
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfInt16{})
		c.free = append(c.free, pageAt)
		offset := c.page[pageAt].Add(v)
		return (64 * pageAt) + offset
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	return (64 * pageAt) + offset
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *ProviderOfInt16) View(f func(*int16)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *ProviderOfInt16) Update(f func(*int16)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// ViewAt returns a specific component located at the given index. Read lock
// is acquired in this operation, use it sparingly.
func (c *ProviderOfInt16) ViewAt(index int) int16 {
	pageAt, offset := index/64, index%64
	c.RLock()
	defer c.RUnlock()
	return *(c.page[pageAt].At(offset))
}

// UpdateAt updates a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfInt16) UpdateAt(index int, f func(*int16)) {
	pageAt, offset := index/64, index%64
	c.Lock()
	f(c.page[pageAt].At(offset))
	c.Unlock()
}

// RemoveAt removes a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfInt16) RemoveAt(index int) {
	pageAt, offset := index/64, index%64
	c.Lock()
	defer c.Unlock()
	if c.page[pageAt].IsFull() {
		c.free = append(c.free, pageAt)
	}
	c.page[pageAt].Del(offset)
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *ProviderOfInt16) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *ProviderOfInt16) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of int16 -----------------------------

// Page represents a page for a particular type.
type pageOfInt16 struct {
	full uint64
	data [64]int16
}

// Add adds an element to the page and returns the offset.
func (p *pageOfInt16) Add(v int16) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfInt16) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfInt16) IsFull() bool {
	return p.full == math.MaxUint64
}

// At returns a specific component located at the given index.
func (p *pageOfInt16) At(index int) *int16 {
	if (p.full & (1 << index)) > 0 {
		return &p.data[index]
	}
	return nil
}

// Range iterates over the page.
func (p *pageOfInt16) Range(f func(*int16)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfInt16) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfInt16) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of int32 ----------------------------

// TypeOfInt32 returns the type of the component
var TypeOfInt32 = reflect.TypeOf(new(int32)).Elem()

// ProviderOfInt32 represents an array of components.
type ProviderOfInt32 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfInt32
}

// NewProviderOfInt32 creates an array of components for the specific type.
func NewProviderOfInt32() *ProviderOfInt32 {
	const cap = 128
	c := &ProviderOfInt32{
		free: make([]int, 0, cap),
		page: make([]pageOfInt32, 0, cap),
	}
	c.typ = reflect.TypeOf(pageOfInt32{}.data).Elem()
	return c
}

// Type returns the type of the component.
func (c *ProviderOfInt32) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *ProviderOfInt32) Add(component interface{}) int {
	v := component.(int32) // Must be of correct type
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfInt32{})
		c.free = append(c.free, pageAt)
		offset := c.page[pageAt].Add(v)
		return (64 * pageAt) + offset
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	return (64 * pageAt) + offset
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *ProviderOfInt32) View(f func(*int32)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *ProviderOfInt32) Update(f func(*int32)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// ViewAt returns a specific component located at the given index. Read lock
// is acquired in this operation, use it sparingly.
func (c *ProviderOfInt32) ViewAt(index int) int32 {
	pageAt, offset := index/64, index%64
	c.RLock()
	defer c.RUnlock()
	return *(c.page[pageAt].At(offset))
}

// UpdateAt updates a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfInt32) UpdateAt(index int, f func(*int32)) {
	pageAt, offset := index/64, index%64
	c.Lock()
	f(c.page[pageAt].At(offset))
	c.Unlock()
}

// RemoveAt removes a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfInt32) RemoveAt(index int) {
	pageAt, offset := index/64, index%64
	c.Lock()
	defer c.Unlock()
	if c.page[pageAt].IsFull() {
		c.free = append(c.free, pageAt)
	}
	c.page[pageAt].Del(offset)
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *ProviderOfInt32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *ProviderOfInt32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of int32 -----------------------------

// Page represents a page for a particular type.
type pageOfInt32 struct {
	full uint64
	data [64]int32
}

// Add adds an element to the page and returns the offset.
func (p *pageOfInt32) Add(v int32) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfInt32) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfInt32) IsFull() bool {
	return p.full == math.MaxUint64
}

// At returns a specific component located at the given index.
func (p *pageOfInt32) At(index int) *int32 {
	if (p.full & (1 << index)) > 0 {
		return &p.data[index]
	}
	return nil
}

// Range iterates over the page.
func (p *pageOfInt32) Range(f func(*int32)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfInt32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfInt32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of int64 ----------------------------

// TypeOfInt64 returns the type of the component
var TypeOfInt64 = reflect.TypeOf(new(int64)).Elem()

// ProviderOfInt64 represents an array of components.
type ProviderOfInt64 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfInt64
}

// NewProviderOfInt64 creates an array of components for the specific type.
func NewProviderOfInt64() *ProviderOfInt64 {
	const cap = 128
	c := &ProviderOfInt64{
		free: make([]int, 0, cap),
		page: make([]pageOfInt64, 0, cap),
	}
	c.typ = reflect.TypeOf(pageOfInt64{}.data).Elem()
	return c
}

// Type returns the type of the component.
func (c *ProviderOfInt64) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *ProviderOfInt64) Add(component interface{}) int {
	v := component.(int64) // Must be of correct type
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfInt64{})
		c.free = append(c.free, pageAt)
		offset := c.page[pageAt].Add(v)
		return (64 * pageAt) + offset
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	return (64 * pageAt) + offset
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *ProviderOfInt64) View(f func(*int64)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *ProviderOfInt64) Update(f func(*int64)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// ViewAt returns a specific component located at the given index. Read lock
// is acquired in this operation, use it sparingly.
func (c *ProviderOfInt64) ViewAt(index int) int64 {
	pageAt, offset := index/64, index%64
	c.RLock()
	defer c.RUnlock()
	return *(c.page[pageAt].At(offset))
}

// UpdateAt updates a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfInt64) UpdateAt(index int, f func(*int64)) {
	pageAt, offset := index/64, index%64
	c.Lock()
	f(c.page[pageAt].At(offset))
	c.Unlock()
}

// RemoveAt removes a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfInt64) RemoveAt(index int) {
	pageAt, offset := index/64, index%64
	c.Lock()
	defer c.Unlock()
	if c.page[pageAt].IsFull() {
		c.free = append(c.free, pageAt)
	}
	c.page[pageAt].Del(offset)
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *ProviderOfInt64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *ProviderOfInt64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of int64 -----------------------------

// Page represents a page for a particular type.
type pageOfInt64 struct {
	full uint64
	data [64]int64
}

// Add adds an element to the page and returns the offset.
func (p *pageOfInt64) Add(v int64) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfInt64) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfInt64) IsFull() bool {
	return p.full == math.MaxUint64
}

// At returns a specific component located at the given index.
func (p *pageOfInt64) At(index int) *int64 {
	if (p.full & (1 << index)) > 0 {
		return &p.data[index]
	}
	return nil
}

// Range iterates over the page.
func (p *pageOfInt64) Range(f func(*int64)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfInt64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfInt64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of uint16 ----------------------------

// TypeOfUint16 returns the type of the component
var TypeOfUint16 = reflect.TypeOf(new(uint16)).Elem()

// ProviderOfUint16 represents an array of components.
type ProviderOfUint16 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfUint16
}

// NewProviderOfUint16 creates an array of components for the specific type.
func NewProviderOfUint16() *ProviderOfUint16 {
	const cap = 128
	c := &ProviderOfUint16{
		free: make([]int, 0, cap),
		page: make([]pageOfUint16, 0, cap),
	}
	c.typ = reflect.TypeOf(pageOfUint16{}.data).Elem()
	return c
}

// Type returns the type of the component.
func (c *ProviderOfUint16) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *ProviderOfUint16) Add(component interface{}) int {
	v := component.(uint16) // Must be of correct type
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfUint16{})
		c.free = append(c.free, pageAt)
		offset := c.page[pageAt].Add(v)
		return (64 * pageAt) + offset
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	return (64 * pageAt) + offset
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *ProviderOfUint16) View(f func(*uint16)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *ProviderOfUint16) Update(f func(*uint16)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// ViewAt returns a specific component located at the given index. Read lock
// is acquired in this operation, use it sparingly.
func (c *ProviderOfUint16) ViewAt(index int) uint16 {
	pageAt, offset := index/64, index%64
	c.RLock()
	defer c.RUnlock()
	return *(c.page[pageAt].At(offset))
}

// UpdateAt updates a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfUint16) UpdateAt(index int, f func(*uint16)) {
	pageAt, offset := index/64, index%64
	c.Lock()
	f(c.page[pageAt].At(offset))
	c.Unlock()
}

// RemoveAt removes a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfUint16) RemoveAt(index int) {
	pageAt, offset := index/64, index%64
	c.Lock()
	defer c.Unlock()
	if c.page[pageAt].IsFull() {
		c.free = append(c.free, pageAt)
	}
	c.page[pageAt].Del(offset)
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *ProviderOfUint16) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *ProviderOfUint16) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of uint16 -----------------------------

// Page represents a page for a particular type.
type pageOfUint16 struct {
	full uint64
	data [64]uint16
}

// Add adds an element to the page and returns the offset.
func (p *pageOfUint16) Add(v uint16) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfUint16) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfUint16) IsFull() bool {
	return p.full == math.MaxUint64
}

// At returns a specific component located at the given index.
func (p *pageOfUint16) At(index int) *uint16 {
	if (p.full & (1 << index)) > 0 {
		return &p.data[index]
	}
	return nil
}

// Range iterates over the page.
func (p *pageOfUint16) Range(f func(*uint16)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfUint16) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfUint16) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of uint32 ----------------------------

// TypeOfUint32 returns the type of the component
var TypeOfUint32 = reflect.TypeOf(new(uint32)).Elem()

// ProviderOfUint32 represents an array of components.
type ProviderOfUint32 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfUint32
}

// NewProviderOfUint32 creates an array of components for the specific type.
func NewProviderOfUint32() *ProviderOfUint32 {
	const cap = 128
	c := &ProviderOfUint32{
		free: make([]int, 0, cap),
		page: make([]pageOfUint32, 0, cap),
	}
	c.typ = reflect.TypeOf(pageOfUint32{}.data).Elem()
	return c
}

// Type returns the type of the component.
func (c *ProviderOfUint32) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *ProviderOfUint32) Add(component interface{}) int {
	v := component.(uint32) // Must be of correct type
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfUint32{})
		c.free = append(c.free, pageAt)
		offset := c.page[pageAt].Add(v)
		return (64 * pageAt) + offset
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	return (64 * pageAt) + offset
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *ProviderOfUint32) View(f func(*uint32)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *ProviderOfUint32) Update(f func(*uint32)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// ViewAt returns a specific component located at the given index. Read lock
// is acquired in this operation, use it sparingly.
func (c *ProviderOfUint32) ViewAt(index int) uint32 {
	pageAt, offset := index/64, index%64
	c.RLock()
	defer c.RUnlock()
	return *(c.page[pageAt].At(offset))
}

// UpdateAt updates a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfUint32) UpdateAt(index int, f func(*uint32)) {
	pageAt, offset := index/64, index%64
	c.Lock()
	f(c.page[pageAt].At(offset))
	c.Unlock()
}

// RemoveAt removes a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfUint32) RemoveAt(index int) {
	pageAt, offset := index/64, index%64
	c.Lock()
	defer c.Unlock()
	if c.page[pageAt].IsFull() {
		c.free = append(c.free, pageAt)
	}
	c.page[pageAt].Del(offset)
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *ProviderOfUint32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *ProviderOfUint32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of uint32 -----------------------------

// Page represents a page for a particular type.
type pageOfUint32 struct {
	full uint64
	data [64]uint32
}

// Add adds an element to the page and returns the offset.
func (p *pageOfUint32) Add(v uint32) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfUint32) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfUint32) IsFull() bool {
	return p.full == math.MaxUint64
}

// At returns a specific component located at the given index.
func (p *pageOfUint32) At(index int) *uint32 {
	if (p.full & (1 << index)) > 0 {
		return &p.data[index]
	}
	return nil
}

// Range iterates over the page.
func (p *pageOfUint32) Range(f func(*uint32)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfUint32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfUint32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of uint64 ----------------------------

// TypeOfUint64 returns the type of the component
var TypeOfUint64 = reflect.TypeOf(new(uint64)).Elem()

// ProviderOfUint64 represents an array of components.
type ProviderOfUint64 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfUint64
}

// NewProviderOfUint64 creates an array of components for the specific type.
func NewProviderOfUint64() *ProviderOfUint64 {
	const cap = 128
	c := &ProviderOfUint64{
		free: make([]int, 0, cap),
		page: make([]pageOfUint64, 0, cap),
	}
	c.typ = reflect.TypeOf(pageOfUint64{}.data).Elem()
	return c
}

// Type returns the type of the component.
func (c *ProviderOfUint64) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *ProviderOfUint64) Add(component interface{}) int {
	v := component.(uint64) // Must be of correct type
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfUint64{})
		c.free = append(c.free, pageAt)
		offset := c.page[pageAt].Add(v)
		return (64 * pageAt) + offset
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	return (64 * pageAt) + offset
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *ProviderOfUint64) View(f func(*uint64)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *ProviderOfUint64) Update(f func(*uint64)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// ViewAt returns a specific component located at the given index. Read lock
// is acquired in this operation, use it sparingly.
func (c *ProviderOfUint64) ViewAt(index int) uint64 {
	pageAt, offset := index/64, index%64
	c.RLock()
	defer c.RUnlock()
	return *(c.page[pageAt].At(offset))
}

// UpdateAt updates a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfUint64) UpdateAt(index int, f func(*uint64)) {
	pageAt, offset := index/64, index%64
	c.Lock()
	f(c.page[pageAt].At(offset))
	c.Unlock()
}

// RemoveAt removes a component at a specific location. Write lock is acquired
// in this operation, use it sparingly.
func (c *ProviderOfUint64) RemoveAt(index int) {
	pageAt, offset := index/64, index%64
	c.Lock()
	defer c.Unlock()
	if c.page[pageAt].IsFull() {
		c.free = append(c.free, pageAt)
	}
	c.page[pageAt].Del(offset)
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *ProviderOfUint64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *ProviderOfUint64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of uint64 -----------------------------

// Page represents a page for a particular type.
type pageOfUint64 struct {
	full uint64
	data [64]uint64
}

// Add adds an element to the page and returns the offset.
func (p *pageOfUint64) Add(v uint64) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfUint64) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfUint64) IsFull() bool {
	return p.full == math.MaxUint64
}

// At returns a specific component located at the given index.
func (p *pageOfUint64) At(index int) *uint64 {
	if (p.full & (1 << index)) > 0 {
		return &p.data[index]
	}
	return nil
}

// Range iterates over the page.
func (p *pageOfUint64) Range(f func(*uint64)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfUint64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfUint64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}
