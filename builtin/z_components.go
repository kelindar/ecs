// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package builtin

import (
	"math"
	"reflect"
	"sync"

	"github.com/kelindar/ecs"
	"github.com/vmihailenco/msgpack"
)

// --------------------------- Component of string ----------------------------

// PoolOfString represents an array of components.
type PoolOfString struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfString
}

// NewPoolOfString creates an array of components for the specific type.
func NewPoolOfString() *PoolOfString {
	const cap = 128
	c := &PoolOfString{
		free: make([]int, 0, cap),
		page: make([]pageOfString, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfString) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfString) Add(entity *ecs.Entity, v string) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfString{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfString) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfString) View(f func(*string)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfString) Update(f func(*string)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfString) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfString) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of string -----------------------------

// Page represents a page for a particular type.
type pageOfString struct {
	full uint64
	data [64]string
}

// Add adds an element to the page and returns the offset.
func (p *pageOfString) Add(v string) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfString) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfString) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfString) Range(f func(*string)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfString) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfString) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of bool ----------------------------

// PoolOfBool represents an array of components.
type PoolOfBool struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfBool
}

// NewPoolOfBool creates an array of components for the specific type.
func NewPoolOfBool() *PoolOfBool {
	const cap = 128
	c := &PoolOfBool{
		free: make([]int, 0, cap),
		page: make([]pageOfBool, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfBool) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfBool) Add(entity *ecs.Entity, v bool) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfBool{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfBool) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfBool) View(f func(*bool)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfBool) Update(f func(*bool)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfBool) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfBool) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of bool -----------------------------

// Page represents a page for a particular type.
type pageOfBool struct {
	full uint64
	data [64]bool
}

// Add adds an element to the page and returns the offset.
func (p *pageOfBool) Add(v bool) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfBool) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfBool) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfBool) Range(f func(*bool)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfBool) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfBool) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of float32 ----------------------------

// PoolOfFloat32 represents an array of components.
type PoolOfFloat32 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfFloat32
}

// NewPoolOfFloat32 creates an array of components for the specific type.
func NewPoolOfFloat32() *PoolOfFloat32 {
	const cap = 128
	c := &PoolOfFloat32{
		free: make([]int, 0, cap),
		page: make([]pageOfFloat32, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfFloat32) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfFloat32) Add(entity *ecs.Entity, v float32) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfFloat32{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfFloat32) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfFloat32) View(f func(*float32)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfFloat32) Update(f func(*float32)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfFloat32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfFloat32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of float32 -----------------------------

// Page represents a page for a particular type.
type pageOfFloat32 struct {
	full uint64
	data [64]float32
}

// Add adds an element to the page and returns the offset.
func (p *pageOfFloat32) Add(v float32) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfFloat32) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfFloat32) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfFloat32) Range(f func(*float32)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfFloat32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfFloat32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of float64 ----------------------------

// PoolOfFloat64 represents an array of components.
type PoolOfFloat64 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfFloat64
}

// NewPoolOfFloat64 creates an array of components for the specific type.
func NewPoolOfFloat64() *PoolOfFloat64 {
	const cap = 128
	c := &PoolOfFloat64{
		free: make([]int, 0, cap),
		page: make([]pageOfFloat64, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfFloat64) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfFloat64) Add(entity *ecs.Entity, v float64) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfFloat64{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfFloat64) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfFloat64) View(f func(*float64)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfFloat64) Update(f func(*float64)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfFloat64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfFloat64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of float64 -----------------------------

// Page represents a page for a particular type.
type pageOfFloat64 struct {
	full uint64
	data [64]float64
}

// Add adds an element to the page and returns the offset.
func (p *pageOfFloat64) Add(v float64) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfFloat64) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfFloat64) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfFloat64) Range(f func(*float64)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfFloat64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfFloat64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of int16 ----------------------------

// PoolOfInt16 represents an array of components.
type PoolOfInt16 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfInt16
}

// NewPoolOfInt16 creates an array of components for the specific type.
func NewPoolOfInt16() *PoolOfInt16 {
	const cap = 128
	c := &PoolOfInt16{
		free: make([]int, 0, cap),
		page: make([]pageOfInt16, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfInt16) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfInt16) Add(entity *ecs.Entity, v int16) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfInt16{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfInt16) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfInt16) View(f func(*int16)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfInt16) Update(f func(*int16)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfInt16) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfInt16) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of int16 -----------------------------

// Page represents a page for a particular type.
type pageOfInt16 struct {
	full uint64
	data [64]int16
}

// Add adds an element to the page and returns the offset.
func (p *pageOfInt16) Add(v int16) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfInt16) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfInt16) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfInt16) Range(f func(*int16)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfInt16) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfInt16) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of int32 ----------------------------

// PoolOfInt32 represents an array of components.
type PoolOfInt32 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfInt32
}

// NewPoolOfInt32 creates an array of components for the specific type.
func NewPoolOfInt32() *PoolOfInt32 {
	const cap = 128
	c := &PoolOfInt32{
		free: make([]int, 0, cap),
		page: make([]pageOfInt32, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfInt32) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfInt32) Add(entity *ecs.Entity, v int32) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfInt32{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfInt32) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfInt32) View(f func(*int32)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfInt32) Update(f func(*int32)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfInt32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfInt32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of int32 -----------------------------

// Page represents a page for a particular type.
type pageOfInt32 struct {
	full uint64
	data [64]int32
}

// Add adds an element to the page and returns the offset.
func (p *pageOfInt32) Add(v int32) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfInt32) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfInt32) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfInt32) Range(f func(*int32)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfInt32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfInt32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of int64 ----------------------------

// PoolOfInt64 represents an array of components.
type PoolOfInt64 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfInt64
}

// NewPoolOfInt64 creates an array of components for the specific type.
func NewPoolOfInt64() *PoolOfInt64 {
	const cap = 128
	c := &PoolOfInt64{
		free: make([]int, 0, cap),
		page: make([]pageOfInt64, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfInt64) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfInt64) Add(entity *ecs.Entity, v int64) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfInt64{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfInt64) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfInt64) View(f func(*int64)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfInt64) Update(f func(*int64)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfInt64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfInt64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of int64 -----------------------------

// Page represents a page for a particular type.
type pageOfInt64 struct {
	full uint64
	data [64]int64
}

// Add adds an element to the page and returns the offset.
func (p *pageOfInt64) Add(v int64) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfInt64) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfInt64) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfInt64) Range(f func(*int64)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfInt64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfInt64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of uint16 ----------------------------

// PoolOfUint16 represents an array of components.
type PoolOfUint16 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfUint16
}

// NewPoolOfUint16 creates an array of components for the specific type.
func NewPoolOfUint16() *PoolOfUint16 {
	const cap = 128
	c := &PoolOfUint16{
		free: make([]int, 0, cap),
		page: make([]pageOfUint16, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfUint16) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfUint16) Add(entity *ecs.Entity, v uint16) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfUint16{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfUint16) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfUint16) View(f func(*uint16)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfUint16) Update(f func(*uint16)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfUint16) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfUint16) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of uint16 -----------------------------

// Page represents a page for a particular type.
type pageOfUint16 struct {
	full uint64
	data [64]uint16
}

// Add adds an element to the page and returns the offset.
func (p *pageOfUint16) Add(v uint16) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfUint16) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfUint16) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfUint16) Range(f func(*uint16)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfUint16) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfUint16) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of uint32 ----------------------------

// PoolOfUint32 represents an array of components.
type PoolOfUint32 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfUint32
}

// NewPoolOfUint32 creates an array of components for the specific type.
func NewPoolOfUint32() *PoolOfUint32 {
	const cap = 128
	c := &PoolOfUint32{
		free: make([]int, 0, cap),
		page: make([]pageOfUint32, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfUint32) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfUint32) Add(entity *ecs.Entity, v uint32) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfUint32{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfUint32) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfUint32) View(f func(*uint32)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfUint32) Update(f func(*uint32)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfUint32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfUint32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of uint32 -----------------------------

// Page represents a page for a particular type.
type pageOfUint32 struct {
	full uint64
	data [64]uint32
}

// Add adds an element to the page and returns the offset.
func (p *pageOfUint32) Add(v uint32) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfUint32) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfUint32) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfUint32) Range(f func(*uint32)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfUint32) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfUint32) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}

// --------------------------- Component of uint64 ----------------------------

// PoolOfUint64 represents an array of components.
type PoolOfUint64 struct {
	sync.RWMutex
	typ  reflect.Type
	free []int
	page []pageOfUint64
}

// NewPoolOfUint64 creates an array of components for the specific type.
func NewPoolOfUint64() *PoolOfUint64 {
	const cap = 128
	c := &PoolOfUint64{
		free: make([]int, 0, cap),
		page: make([]pageOfUint64, 0, cap),
	}
	c.typ = reflect.TypeOf(c)
	return c
}

// Type returns the type of the component.
func (c *PoolOfUint64) Type() reflect.Type {
	return c.typ
}

// Add adds a component to the array. Returns the index in the array which
// can be used to remove the component from the array.
func (c *PoolOfUint64) Add(entity *ecs.Entity, v uint64) {
	c.Lock()
	defer c.Unlock()

	if len(c.free) == 0 {
		pageAt := len(c.page)
		c.page = append(c.page, pageOfUint64{})
		c.free = append(c.free, pageAt)
		c.attach(entity, pageAt, c.page[pageAt].Add(v))
		return
	}

	// find the free page and append
	last := len(c.free) - 1
	pageAt := c.free[last]
	offset := c.page[pageAt].Add(v)
	if c.page[pageAt].IsFull() {
		c.free = c.free[:last]
	}
	c.attach(entity, pageAt, offset)
}

// attach attaches the remove function to the entity.
func (c *PoolOfUint64) attach(entity *ecs.Entity, pageAt, offset int) {
	index := (64 * pageAt) + offset
	entity.Attach(func() {
		c.Lock()
		defer c.Unlock()
		pageAt, offset := index/64, index%64
		if c.page[pageAt].IsFull() {
			c.free = append(c.free, pageAt)
		}
		c.page[pageAt].Del(offset)
	})
}

// View iterates over the array but only acquires a read lock. Make sure you do
// not mutate the state during this iteration as the pointer is given merely for
// performance reasons.
func (c *PoolOfUint64) View(f func(*uint64)) {
	c.RLock()
	defer c.RUnlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// Update ranges over the data in the slice and lets the user update it. This
// acquires a read-write lock and is safe to update concurrently.
func (c *PoolOfUint64) Update(f func(*uint64)) {
	c.Lock()
	defer c.Unlock()
	for i := 0; i < len(c.page); i++ {
		c.page[i].Range(f)
	}
}

// EncodeMsgpack encodes the component in message pack format into the writer.
func (c *PoolOfUint64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.Encode(c.free); err == nil {
		err = enc.Encode(c.page)
	}
	return
}

// DecodeMsgpack decodes the page from the reader in message pack format.
func (c *PoolOfUint64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if err = dec.Decode(&c.free); err == nil {
		err = dec.Decode(&c.page)
	}
	return
}

// ---------------------------- Page of uint64 -----------------------------

// Page represents a page for a particular type.
type pageOfUint64 struct {
	full uint64
	data [64]uint64
}

// Add adds an element to the page and returns the offset.
func (p *pageOfUint64) Add(v uint64) (index int) {
	if p.IsFull() {
		return -1
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) == 0 {
			p.full |= (1 << i)
			p.data[i] = v
			return i
		}
	}
	return -1
}

// Del deletes an element at an offset.
func (p *pageOfUint64) Del(index int) {
	p.full &= uint64(^(1 << index))
}

// IsFull checks whether the page is full or not.
func (p *pageOfUint64) IsFull() bool {
	return p.full == math.MaxUint64
}

// Range iterates over the page.
func (p *pageOfUint64) Range(f func(*uint64)) {
	if p.IsFull() {
		for i := 0; i < 64; i++ {
			f(&p.data[i])
		}
		return
	}

	for i := 0; i < 64; i++ {
		if (p.full & (1 << i)) > 0 {
			f(&p.data[i])
		}
	}
}

// Encode encodes the page in message pack format into the writer.
func (p *pageOfUint64) EncodeMsgpack(enc *msgpack.Encoder) (err error) {
	if err = enc.EncodeUint64(p.full); err == nil {
		err = enc.Encode(p.data)
	}
	return
}

// Decode decodes the page from the reader in message pack format.
func (p *pageOfUint64) DecodeMsgpack(dec *msgpack.Decoder) (err error) {
	if p.full, err = dec.DecodeUint64(); err == nil {
		err = dec.Decode(&p.data)
	}
	return
}
